package MelonUtilities.commands.home;

import MelonUtilities.config.Data;
import MelonUtilities.config.datatypes.PlayerData;
import MelonUtilities.utility.feedback.FeedbackHandler;
import MelonUtilities.utility.syntax.SyntaxBuilder;
import MelonUtilities.config.custom.classes.Home;
import MelonUtilities.utility.UUIDHelper;
import net.minecraft.core.net.command.Command;
import net.minecraft.core.net.command.CommandHandler;
import net.minecraft.core.net.command.CommandSource;
import net.minecraft.core.net.command.TextFormatting;

public class SetHomeCommandOld extends Command {

	public SetHomeCommandOld() {
		super("sethome");
	}

	double scale = Math.pow(10, 1);

	public void addHome(String name, double x, double y, double z, int dimID, CommandSource source){
		Data.playerData.getOrCreate(UUIDHelper.getUUIDFromName(source.getSender().username).toString(), PlayerData.class).homes.add(new Home(name, x, y, z, dimID));
		Data.playerData.saveAll();
	}

	static SyntaxBuilder syntax = new SyntaxBuilder();

	public static void buildSyntax(){
		syntax.clear();
		syntax.append("title",                                                  TextFormatting.LIGHT_GRAY + "< Command Syntax >");
		syntax.append("sethome",                                                 TextFormatting.LIGHT_GRAY + "  > /sethome [<home name>]");
	}

	@Override
	public boolean execute(CommandHandler handler, CommandSource source, String[] args) {

		int dimID = source.getSender().dimension;
		double x = Math.round(source.getSender().x * scale) / scale;
		double y = Math.round(source.getSender().y * scale) / scale;
		double z = Math.round(source.getSender().z * scale) / scale;

		Home home = HomeCommandOld.getHome("home", source);

		if (args.length == 0 && home == null) {

			addHome("home", x, y, z, dimID, source);
			FeedbackHandler.success(source, "Set Home: <home> to:");
			FeedbackHandler.success(source, "[Dimension: " + source.getSender().world.dimension.getTranslatedName() + "]");
			FeedbackHandler.success(source, "[x: " + x + " y: " + y + " z: " + z + "]");
			return true;

		} else if (args.length == 0) {
			source.sendMessage(TextFormatting.RED + "Failed to Set Home (Home already exists!))");
			syntax.printLayerAndSubLayers("sethome", source);
			return true;
		} else if (args.length == 1) {
			home = HomeCommandOld.getHome(args[0], source);
			if(home == null){
				addHome(args[0], x, y, z, dimID, source);
				FeedbackHandler.success(source, "Set Home: <" + args[0] + "> to:");
				FeedbackHandler.success(source, "[Dimension: " + source.getSender().world.dimension.getTranslatedName() + "]");
				FeedbackHandler.success(source, "[x: " + x + " y: " + y + " z: " + z + "]");
				return true;
			}
			FeedbackHandler.error(source, "Failed to Set Home (Invalid Syntax)");
			syntax.printLayerAndSubLayers("sethome", source);
			return true;
		}
        return true;
	}

	@Override
	public boolean opRequired(String[] strings) {
		return false;
	}

	@Override
	public void sendCommandSyntax(CommandHandler handler, CommandSource source) {
		syntax.printAllLines(source);
	}
}
