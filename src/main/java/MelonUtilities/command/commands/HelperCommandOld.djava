package MelonUtilities.command.helper;

import MelonUtilities.config.Data;
import MelonUtilities.config.datatypes.PlayerData;
import MelonUtilities.utility.feedback.FeedbackHandlerServer;
import MelonUtilities.utility.syntax.SyntaxBuilder;
import MelonUtilities.utility.helpers.UUIDHelper;
import net.minecraft.core.net.command.Command;
import net.minecraft.core.net.command.CommandHandler;
import net.minecraft.core.net.command.CommandSource;
import net.minecraft.core.net.command.TextFormatting;
import net.minecraft.server.entity.player.ServerPlayer;

public class HelperCommandOld extends Command {

	private final static String COMMAND = "helper";

	public HelperCommandOld() {super(COMMAND, "h");}

	public static SyntaxBuilder syntax = new SyntaxBuilder();

	public static void buildHelperSyntax(){
		syntax.clear();
		syntax.append("title",                                                   TextFormatting.LIGHT_GRAY + "< Command Syntax > ([] = optional, <> = variable, / = or)");
		syntax.append("helper", "title",                                  TextFormatting.LIGHT_GRAY + "  > /helper <mode>");
		syntax.append("helperAdd", "helper",                              TextFormatting.LIGHT_GRAY + "    > add <username>");
		syntax.append("helperRemove", "helper",                           TextFormatting.LIGHT_GRAY + "    > remove <username>");
	}

	private boolean add(CommandHandler handler, CommandSource source, String[] args){
		String username = args[1];
		ServerPlayer player = (ServerPlayer) handler.getPlayer(username);

		if (player != null && !Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper) {
			FeedbackHandler.sendFeedback(FeedbackType.success, source, "You are now a Helper!");
			FeedbackHandler.sendFeedback(FeedbackType.success, source, "Setting " + TextFormatting.GRAY + username + TextFormatting.LIME + " to Helper.");

			Data.user.loadAll(PlayerData.class);
			Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper = true;
			Data.user.saveAll();

			return true;
		} else if (Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper){
			handler.sendCommandFeedback(source, TextFormatting.GRAY + username + TextFormatting.RED + " is already a helper!");
			return true;
		} else if (player == null) {
			FeedbackHandler.sendFeedback(FeedbackType.success, source, TextFormatting.LIME + "Setting " + TextFormatting.GRAY + username + TextFormatting.LIME + " to Helper.");

			Data.user.loadAll(PlayerData.class);
			Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper = true;
			Data.user.saveAll();

			return true;
		}
		return true;
	}

	private boolean remove(CommandHandler handler, CommandSource source, String[] args){
		String username = args[1];
		ServerPlayer player = (ServerPlayer) handler.getPlayer(username);

		if (player != null && Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper) {
			FeedbackHandler.sendFeedback(FeedbackType.destructive, source, "You are no longer a Helper!");
			FeedbackHandler.sendFeedback(FeedbackType.success, source, TextFormatting.LIME + "Removing " + TextFormatting.GRAY + username + TextFormatting.LIME + " from Helper List.");

			Data.user.loadAll(PlayerData.class);
			Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper = false;
			Data.user.saveAll();

			return true;
		} else if(!Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper){
			FeedbackHandler.error(source, TextFormatting.GRAY + username + TextFormatting.RED + " isn't a helper!");
			return true;
		} else if (player == null) {
			FeedbackHandler.sendFeedback(FeedbackType.success, source, TextFormatting.LIME + "Removing " + TextFormatting.GRAY + username + TextFormatting.LIME + " from Helper List.");

			Data.user.loadAll(PlayerData.class);
			Data.user.getOrCreate(UUIDHelper.getUUIDFromName(username).toString(), PlayerData.class).isHelper = false;
			Data.user.saveAll();

			return true;
		}
		return true;
	}

	@Override
	public boolean execute(CommandHandler handler, CommandSource source, String[] args) {

		if (args.length == 0) {
			return false;
		}

		switch(args[0]){
			case "add":
				return add(handler, source, args);
			case "remove":
				return remove(handler, source, args);
		}

		source.sendMessage(TextFormatting.RED + "Helper Command Failed (Invalid Syntax)");
		syntax.printAllLines(source);
		return true;
	}

	@Override
	public boolean opRequired(String[] args) {
		return true;
	}

	@Override
	public void sendCommandSyntax(CommandHandler handler, CommandSource source) {
		syntax.printAllLines(source);
	}
}
